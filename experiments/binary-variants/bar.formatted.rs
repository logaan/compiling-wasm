// Generated by `wit-bindgen` 0.43.0. DO NOT EDIT!
// Options used:
#[derive(Clone, Copy)]
pub enum MaybeU8 {
    None,
    Some(u8),
}

impl ::core::fmt::Debug for MaybeU8 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        match self {
            MaybeU8::None => f.debug_tuple("MaybeU8::None").finish(),
            MaybeU8::Some(e) => f.debug_tuple("MaybeU8::Some").field(e).finish(),
        }
    }
}

#[doc(hidden)]
#[allow(non_snake_case, unused_unsafe)]
pub unsafe fn _export_take_cabi<T: Guest>(arg0: i32, arg1: i32) {
    unsafe {
        #[cfg(target_arch = "wasm32")]
        _rt::run_ctors_once();
        {
            let v0 = match arg0 {
                0 => MaybeU8::None,
                n => {
                    debug_assert_eq!(n, 1, "invalid enum discriminant");
                    let e0 = arg1 as u8;
                    MaybeU8::Some(e0)
                }
            };
            T::take(v0)
        };
    }
}

#[doc(hidden)]
#[allow(non_snake_case, unused_unsafe)]
pub unsafe fn _export_give_cabi<T: Guest>() -> *mut u8 {
    unsafe {
        #[cfg(target_arch = "wasm32")]
        _rt::run_ctors_once();
        let result0 = { T::give() };
        let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
        match result0 {
            MaybeU8::None => {
                *ptr1.add(0).cast::<u8>() = (0i32) as u8;
            }
            MaybeU8::Some(e) => {
                *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                *ptr1.add(1).cast::<u8>() = (_rt::as_i32(e)) as u8;
            }
        }
        ptr1
    }
}

pub trait Guest {
    #[allow(async_fn_in_trait)]
    fn take(message: MaybeU8) -> ();
    #[allow(async_fn_in_trait)]
    fn give() -> MaybeU8;
}

#[doc(hidden)]
macro_rules! __export_world_bar_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[unsafe(export_name = "take")]
    unsafe extern "C" fn export_take(arg0: i32,arg1: i32,) {
      unsafe { $($path_to_types)*::_export_take_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "give")]
    unsafe extern "C" fn export_give() -> *mut u8 {
      unsafe { $($path_to_types)*::_export_give_cabi::<$ty>() }
    }
  };);
}

#[doc(hidden)]
pub(crate) use __export_world_bar_cabi;

#[repr(align(1))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 2]);

static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 2]);

mod _rt {
    #![allow(dead_code, clippy::all)]

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen::rt::run_ctors_once();
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
}

/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_bar_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_bar_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}

#[doc(inline)]
pub(crate) use __export_bar_impl as export;

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.43.0:logan:binary-variants:bar:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 226] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07i\x01A\x02\x01A\x06\x01\
q\x02\x04none\0\0\x04some\x01}\0\x03\0\x08maybe-u8\x03\0\0\x01@\x01\x07message\x01\
\x01\0\x04\0\x04take\x01\x02\x01@\0\0\x01\x04\0\x04give\x01\x03\x04\0\x19logan:b\
inary-variants/bar\x04\0\x0b\x09\x01\0\x03bar\x03\0\0\0G\x09producers\x01\x0cpro\
cessed-by\x02\x0dwit-component\x070.235.0\x10wit-bindgen-rust\x060.43.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}
