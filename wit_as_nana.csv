"Wit Type"     , "Nana Example"                                                      , "Explaination"
"bool"         , ":true, :false"                                                     , "`:true` evaluates to itself, true would suggest it's referring to something else"
"s8"           , "99.s8"                                                             , "`s8` is a constructor for s8s"
"u8"           , "99.u8"                                                             , "`u8` is a constructor for u8s"
"s16"          , "99.s16"                                                            , "`s16` is a constructor for s16s"
"u16"          , "99.u16"                                                            , "`u16` is a constructor for u16s"
"s32"          , "99.u32"                                                            , "`s32` is a constructor for s32s"
"u32"          , "99.u32"                                                            , "`u32` is a constructor for u32s"
"s64"          , "99, 99.u64"                                                        , "s64 is the default. `s64` is a constructor for s64s"
"u64"          , "99.u64"                                                            , "`u64` is a constructor for u64s"
"f32"          , "99.99.f32"                                                         , "The float constructor takes a number tagged with a number"
"f64"          , "99.99.f64"                                                         , "The float constructor takes a number tagged with a number"
"char"         , "\a"                                                                , ""
"string"       , "'Hello, Joe!'"                                                     , "Single quote doesn't need shift to type."
"error-context", "None"                                                              , "I've seen reference to it in the ABI, but not elsewhere"
"record"       , ":customer{:id 99.u64 :name 'Logan' :picture :none}"                , "All these values evaluate to themselves. Braces signify pairs of values."
"variant"      , ":none, :any, :restricted([])"                                      , ""
"list"         , "[], [1 2 3]"                                                       , ""
"tuple"        , "(1 2 3)"                                                           , ""
"flags"        , ":allowed-methods{:get :true :post :false :put :true :delete :true}", ""
"enum"         , ":hot-pink, :lime-green, :navy-blue"                                , ""
"option"       , ":some(42), :none"                                                  , ""
"result"       , ":ok(42), :err('Could not compute')"                                , ""
"own"          , "??"                                                                , "Not sure if a literal syntax makes sense"
"borrow"       , "??"                                                                , "Not sure if a literal syntax makes sense"
"stream"       , "None"                                                              , "No literal syntax"
"future"       , "None"                                                              , "No literal syntax"
               ,                                                                     , 
               , "Type interence would be pretty nice for all the number types"      , 
               , "Will booleans as keywords mess with syntax highlighting?"          , 
               , "What about Nana types"                                             , 
"Nana type"    , "WIT type"                                                          , ""
"symbol"       , "symbol('greet')"                                                   , "Maybe keywords rather than symbols everywhere is making invalid states representable. Symbol checking is a really nice part of Clojure and Erlang."
"keyword"      , "keyword('name')"                                                   , 
